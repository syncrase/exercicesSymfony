{% block javascripts %}

    <script type="text/javascript">
        /**
         * Get timeline content to add it in the control panel
         * @param {type} event
         * @param {type} properties
         * @returns {undefined}
         */
        function ctrlPnlInputFeeder(event, properties) {
            resetControlPanel();
            // Complète le control panel avec les informations de l'item sélectionné
            if (properties.item !== null) {
                // properties.item is the id of the timeline item
                focusedItem = properties.item;
                var dataSetItem = dataSetItems.get(focusedItem);
                // Handle the live DOM
                document.getElementById(controlPanelContent).setAttribute('value', dataSetItem.content);
                document.getElementById(controlPanelStart).setAttribute('value', dataSetItem.start);
                if (dataSetItem.end !== undefined) {
                    document.getElementById(controlPanelEnd).setAttribute('value', dataSetItem.end);
                }
                if (dataSetItem.notes !== undefined) {
                    document.getElementById(controlPanelNotes).setAttribute('value', dataSetItem.notes);
                }
                // Handle the static DOM (le texte tapé à la main)
                document.querySelector('#'.concat(controlPanelContent)).value = dataSetItem.content;
                document.querySelector('#'.concat(controlPanelStart)).value = dataSetItem.start;
                if (dataSetItem.end !== undefined) {
                    document.querySelector('#'.concat(controlPanelEnd)).value = dataSetItem.end;
                }
                if (dataSetItem.notes !== undefined) {
                    document.querySelector('#'.concat(controlPanelNotes)).value = dataSetItem.notes;
                }
            } else {
                //resetControlPanel();
            }
        }

        /**
         * Reset the control panel fields
         * @returns {undefined}
         */
        function resetControlPanel() {
            // Handle the static DOM (le texte tapé à la main)
            document.querySelector('#'.concat(controlPanelContent)).value = '';
            // BUG? Each time the value is set to '', the 'required' 
            // attribute is added and the form is validate (all fields 
            // borders are printed in red)
            document.querySelector('#'.concat(controlPanelContent)).removeAttribute('required');
            document.querySelector('#'.concat(controlPanelStart)).value = '';
            document.querySelector('#'.concat(controlPanelStart)).removeAttribute('required');
            document.querySelector('#'.concat(controlPanelEnd)).value = '';
            document.querySelector('#'.concat(controlPanelEnd)).removeAttribute('required');
            document.querySelector('#'.concat(controlPanelNotes)).value = '';
            document.querySelector('#'.concat(controlPanelNotes)).removeAttribute('required');
            // Handle the live DOM
            //document.getElementById(controlPanelContent).innerHTML = 'tututu';
            document.getElementById(controlPanelContent).removeAttribute('value');
            document.getElementById(controlPanelStart).removeAttribute('value');
            document.getElementById(controlPanelEnd).removeAttribute('value');
            document.getElementById(controlPanelNotes).removeAttribute('value');
            // Reset the validation coloration
            document.getElementById(controlPanelContent).classList.remove('is-invalid');
            document.getElementById(controlPanelContent).classList.remove('is-valid');
            document.getElementById(controlPanelStart).classList.remove('is-invalid');
            document.getElementById(controlPanelStart).classList.remove('is-valid');
            document.getElementById(controlPanelEnd).classList.remove('is-invalid');
            document.getElementById(controlPanelEnd).classList.remove('is-valid');
            focusedItem = 0;
        }

        /**
         * Get control panel content to add it in the timeline.
         * Method called at each modification in control panel.
         * @param {type} formField
         * @returns {undefined}
         */
        function ctrlPnlManageUpdate(formField) {
            //alert(formField.id);
            if (focusedItem !== 0) {
                // Modification live de l'item sélectionné
                var dataSetItem = dataSetItems.get(focusedItem);
                if (formField.id === controlPanelNotes) {
                    //alert(formField.value.replace(/\n/g, "\\n"));
                    // see https://stackoverflow.com/questions/25921319/escape-new-lines-with-js
                    dataSetItem.notes = formField.value.replace(/\n/g, "\\n");
                    dataSetItems.update(dataSetItem);
                } else if (formField.id === controlPanelContent) {
                    //alert('content modif');
                    dataSetItem.content = formField.value;
                    dataSetItems.update(dataSetItem);
                } else if (formField.id === controlPanelStart) {
                    //alert('start date modif');
                    if (dateFormatValidation(formField.value)) {
                        dataSetItem.start = formField.value;
                        dataSetItems.update(dataSetItem);
                    } else {
                        ctrlPnlValidateForm();
                    }
                } else if (formField.id === controlPanelEnd) {
                    //alert('end date modif');
                    if (dateFormatValidation(formField.value)) {
                        dataSetItem.end = formField.value;
                        dataSetItems.update(dataSetItem);
                    } else {
                        ctrlPnlValidateForm();
                    }
                } else {
                    // Remove this alert. Prefer to add a log error
                    alert('Id is unknown, please refer to the ctrlPnlManageUpdate method');
                }
            } else {
                //alert('no selected item');
                //=> on débloque le bouton valider pour la création d'un nouvel objet
                ctrlPnlAddBtnActivation();
            }

        }

        /**
         * Switch between 'is-valid' and 'is-invalid'  form inputs class
         * @returns {undefined}
         */
        function ctrlPnlValidateForm() {
            if (document.getElementById(controlPanelContent).value !== '') {
                document.getElementById(controlPanelContent).classList.remove('is-invalid');
                document.getElementById(controlPanelContent).classList.add('is-valid');
            } else {
                document.getElementById(controlPanelContent).classList.remove('is-valid');
                document.getElementById(controlPanelContent).classList.add('is-invalid');
            }

            if (dateFormatValidation(document.getElementById(controlPanelStart).value)) {
                document.getElementById(controlPanelStart).classList.remove('is-invalid');
                document.getElementById(controlPanelStart).classList.add('is-valid');
            } else {
                document.getElementById(controlPanelStart).classList.remove('is-valid');
                document.getElementById(controlPanelStart).classList.add('is-invalid');
            }

            //alert(document.getElementById(controlPanelEnd).value !== '');
            if (document.getElementById(controlPanelEnd).value !== '') {
                if (dateFormatValidation(document.getElementById(controlPanelEnd).value)) {
                    document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                    document.getElementById(controlPanelEnd).classList.add('is-valid');
                } else {
                    document.getElementById(controlPanelEnd).classList.remove('is-valid');
                    document.getElementById(controlPanelEnd).classList.add('is-invalid');
                }
            } else {
                // Si le champ est vide c'est valide
                document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                document.getElementById(controlPanelEnd).classList.add('is-valid');
            }
            //
            // No validation for notes
        }
        /**
         * Check the control panel fields in order to activate the add button
         * @returns {undefined}
         */
        function ctrlPnlAddBtnActivation() {

            ctrlPnlValidateForm();

            // si les deux sont valides, supprimer l'attribut disabled
            // TODO Il faut vérifier que les données sont cohérentes
            // La date de début est-elle antérieure à la date de fin?
            //    alert(document.getElementById(controlPanelEnd).classList.contains('is-valid'));

            if (document.getElementById(controlPanelEnd).classList.contains('is-valid') &&
                    document.getElementById(controlPanelStart).classList.contains('is-valid') &&
                    document.getElementById(controlPanelContent).classList.contains('is-valid')) {
                //alert('removeAttribute');
                document.getElementById(ctrlPnlAddBtn).removeAttribute('disabled');
            } else {
                //alert('removeAttribute');
                document.getElementById(ctrlPnlAddBtn).setAttribute('disabled', 'true');
            }

        }

        /**
         * Front-side date format validation
         * @param {type} date
         * @returns {Boolean}
         */
        function dateFormatValidation(date) {
            // see the html pattern attribute < ... pattern="[A-Za-z]{3}" ... >
            var splitedDateContent = date.split('-');
            if (splitedDateContent.length === 1) {
                // Dans ce cas c'est censé n'être que l'année
                var res = (/^-?\d+$/).test(splitedDateContent[0]);
                if (res === true) {
                    return true;
                } else {
                    return false;
                }
                // Dance ce cas la il va falloir que je renvoie le code d'adaptation de la date saisie!
            } else if (splitedDateContent.length === 3) {
                // Les expressions régulières peuvent être largement améliorées!
                var res = (/^(-\d{6}|\d{4})$/).test(splitedDateContent[0]);
                if (res === true) {
                    // OK pour l'année
                    res = (/^[0-1]?\d{1}$/).test(splitedDateContent[1]);
                    if (res === true) {
                        // OK pour le mois
                        res = (/^[0-3]?\d{1}$/).test(splitedDateContent[2]);
                        if (res === true) {
                            // OK pour le jours
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                // Ni une seule année ni une date complète.
                return false;
            }
        }

        /**
         * Add the control panel new item to the timeline.
         * The content must be validate before.
         * @returns {undefined}
         */
        function ctrlPnlManageAjout() {
            var controlPanelContent = 'timeline_control_panel_form_content';
            var contentVal = document.getElementById(controlPanelContent).value;
            var controlPanelStart = 'timeline_control_panel_form_start';
            var startVal = document.getElementById(controlPanelStart).value;
            var controlPanelEnd = 'timeline_control_panel_form_end';
            var endVal = document.getElementById(controlPanelEnd).value;
            var controlPanelNotes = 'timeline_control_panel_form_notes';
            var notesVal = document.getElementById(controlPanelNotes).value;
            lastId++;
            dataSetItems.add({id: lastId, content: contentVal, start: startVal});
            if (endVal !== '') {
                dataSetItems.update({id: lastId, end: endVal});
            }
            if (notesVal !== '') {
                dataSetItems.update({id: lastId, notes: notesVal});
            }
            // **TODO** ajout de la date dans le tableau associatif des dates 
            // pour signaler quels éléments n'ont pas été renseignés par 
            // l'utilisateur mais ajoutés tout de même pour rendre les 
            // dates visJS Friendly
            visFriendlyDatesLength++;
            // Dépends de ce qu'à renseigné l'utilisateur
            // TODO Check pour les deux dates si c'est 
            // année | année & mois | année & mois & jour
            visFriendlyDates[String(visFriendlyDatesLength)] = {
                start: '7',
                end: '0'
            };
            resetControlPanel();
        }

        /**
         * Fill hidden fields just before sending the request to the controller
         * @returns no return
         */
        function fillHiddenField() {
            // the http request size could be a problem 
            // In this case check this url: 
            // https://stackoverflow.com/questions/2364840/what-is-the-size-limit-of-a-post-request
            // // JSON.stringify documentation: 
            // https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify
            // Add the full content of the timeline to the 'updatedDataSet' hidden input
            var dataSet = dataSetItems.get({
                fields: ['id', 'content', 'start', 'end', 'notes'],
                type: {
                    id: 'Number',
                    start: 'String',
                    end: 'String'
                }
            });
            // TODO mettre un log a cet endroit pour indiquer la taille de la requête avant du'elle parte
            // + si possible la taille de la configuration serveur
            // Log d'erreur si la taille de la requête est supérieur à la taille permise par le serveur
            document.getElementById('updatedDataSet').setAttribute('value', JSON.stringify(dataSet, null, 2));
            // Add the first loaded (and unmodified) ids timelineItem association
            document.getElementById('visFriendlyIds').setAttribute('value', JSON.stringify(visFriendlyIds, null, 2));
            // Add the associative array to inform which dates are by default
            document.getElementById('visFriendlyDates').setAttribute('value', JSON.stringify(visFriendlyDates, null, 2));
        }
    </script>

{% endblock %}