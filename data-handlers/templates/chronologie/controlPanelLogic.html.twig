{% block javascripts %}

    <script type="text/javascript">
        /**
         * Get timeline content to add it in the control panel
         * @param {type} event
         * @param {type} properties
         * @returns {undefined}
         */
        function ctrlPnlInputFeeder(event, properties) {
            resetControlPanel();
            // Complète le control panel avec les informations de l'item sélectionné
            if (properties.item !== null) {
                // properties.item is the id of the timeline item
                focusedItem = properties.item;
                ctrlPnlAddBtnActivation();
                var dataSetItem = dataSetItems.get(focusedItem);
                // Handle the live DOM
                document.getElementById(controlPanelContent).setAttribute('value', dataSetItem.content);
                document.getElementById(controlPanelStart).setAttribute('value', dataSetItem.start);
                if (dataSetItem.end !== undefined) {
                    document.getElementById(controlPanelEnd).setAttribute('value', dataSetItem.end);
                }
                if (dataSetItem.notes !== undefined) {
                    //quill.setText(dataSetItem.notes);
                    quill.setContents(dataSetItem.notes);
                }
                // Handle the static DOM (le texte tapé à la main)
                document.querySelector('#'.concat(controlPanelContent)).value = dataSetItem.content;
                document.querySelector('#'.concat(controlPanelStart)).value = dataSetItem.start;
                if (dataSetItem.end !== undefined) {
                    document.querySelector('#'.concat(controlPanelEnd)).value = dataSetItem.end;
                }

                if (metaTimeline[focusedItem]['notes'] !== undefined &&
                        metaTimeline[focusedItem]['notes'] !== '') {
                    quill.setContents(JSON.parse(metaTimeline[focusedItem]['notes']));
                }
                ctrlPnlValidateForm();
            } else {
            }
        }

        // Ajoute l'event listener à chaque item de la timeline
        timeline.on('click', function (properties) {
            ctrlPnlInputFeeder('click', properties);
        });

        /**
         * Reset the control panel fields
         * @returns {undefined}
         */
        function resetControlPanel() {
            // Handle the static DOM (le texte tapé à la main)
            document.querySelector('#'.concat(controlPanelContent)).value = '';
            // BUG? Each time the value is set to '', the 'required' 
            // attribute is added and the form is validate (all fields 
            // borders are printed in red)
            document.querySelector('#'.concat(controlPanelContent)).removeAttribute('required');
            document.querySelector('#'.concat(controlPanelStart)).value = '';
            document.querySelector('#'.concat(controlPanelStart)).removeAttribute('required');
            document.querySelector('#'.concat(controlPanelEnd)).value = '';
            document.querySelector('#'.concat(controlPanelEnd)).removeAttribute('required');
            quill.setText('');
            // Handle the live DOM
            document.getElementById(controlPanelContent).removeAttribute('value');
            document.getElementById(controlPanelStart).removeAttribute('value');
            document.getElementById(controlPanelEnd).removeAttribute('value');
            // Reset the validation coloration
            document.getElementById(controlPanelContent).classList.remove('is-invalid');
            document.getElementById(controlPanelContent).classList.remove('is-valid');
            document.getElementById(controlPanelStart).classList.remove('is-invalid');
            document.getElementById(controlPanelStart).classList.remove('is-valid');
            document.getElementById(controlPanelEnd).classList.remove('is-invalid');
            document.getElementById(controlPanelEnd).classList.remove('is-valid');
            focusedItem = 0;
        }

        /**
         * Get control panel content to add it in the timeline and metaTimeline.
         * Method called at each modification in control panel.
         * @param {type} formField
         * @returns {undefined}
         */
        function ctrlPnlManageUpdate(formField) {
            // Update the editor with the last user insertion
            quill.update();
            if (focusedItem !== 0) {
                // Modification live de l'item sélectionné
                var dataSetItem = dataSetItems.get(focusedItem);
                if (formField.id === controlPanelNotes) {
                    metaTimeline[focusedItem]['notes'] = JSON.stringify(quill.getContents());
                    if (metaTimeline[focusedItem]['action'] !== 'create') {
                        metaTimeline[focusedItem]['action'] = 'update';
                    }
                } else if (formField.id === controlPanelContent) {
                    metaTimeline[focusedItem]['content'] = formField.value;
                    if (metaTimeline[focusedItem]['action'] !== 'create') {
                        metaTimeline[focusedItem]['action'] = 'update';
                    }
                    dataSetItem.content = formField.value;
                    dataSetItems.update(dataSetItem);
                } else if (formField.id === controlPanelStart) {
                    if (dateFormatValidation(formField.value)) {
                        dataSetItem.start = formField.value;
                        dataSetItems.update(dataSetItem);
                        if (metaTimeline[focusedItem]['action'] !== 'create') {
                            metaTimeline[focusedItem]['action'] = 'update';
                        }
                        setDateInMeta(focusedItem, 'start', formField.value);
                    } else {
                    }
                } else if (formField.id === controlPanelEnd) {

                    if (dateFormatValidation(formField.value)) {
                        dataSetItem.end = formField.value;
                        dataSetItems.update(dataSetItem);
                        if (metaTimeline[focusedItem]['action'] !== 'create') {
                            metaTimeline[focusedItem]['action'] = 'update';
                        }
                        setDateInMeta(focusedItem, 'end', formField.value);
                    } else {
                    }
                } else {
                    // Remove this alert. Prefer to add a log error
                    alert('Id is unknown, please refer to the ctrlPnlManageUpdate method');
                }
                ctrlPnlValidateForm();
            } else {
                //=> on débloque le bouton valider pour la création d'un nouvel objet
                ctrlPnlAddBtnActivation();
            }
        }

        /**
         * Switch between 'is-valid' and 'is-invalid'  form inputs class
         * @returns {undefined}
         */
        function ctrlPnlValidateForm() {
            if (document.getElementById(controlPanelContent).value !== '') {
                document.getElementById(controlPanelContent).classList.remove('is-invalid');
                document.getElementById(controlPanelContent).classList.add('is-valid');
            } else {
                document.getElementById(controlPanelContent).classList.remove('is-valid');
                document.getElementById(controlPanelContent).classList.add('is-invalid');
            }

            if (dateFormatValidation(document.getElementById(controlPanelStart).value)) {
                document.getElementById(controlPanelStart).classList.remove('is-invalid');
                document.getElementById(controlPanelStart).classList.add('is-valid');
            } else {
                document.getElementById(controlPanelStart).classList.remove('is-valid');
                document.getElementById(controlPanelStart).classList.add('is-invalid');
            }

            if (document.getElementById(controlPanelEnd).value !== '') {
                if (dateFormatValidation(document.getElementById(controlPanelEnd).value)) {
                    document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                    document.getElementById(controlPanelEnd).classList.add('is-valid');
                } else {
                    document.getElementById(controlPanelEnd).classList.remove('is-valid');
                    document.getElementById(controlPanelEnd).classList.add('is-invalid');
                }
            } else {
                // Si le champ est vide c'est valide
                document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                document.getElementById(controlPanelEnd).classList.add('is-valid');
            }
            // No validation for notes
        }

        /**
         * Check the control panel fields in order to activate the add button
         * @returns {undefined}
         */
        function ctrlPnlAddBtnActivation() {
            ctrlPnlValidateForm();
            if (document.getElementById(controlPanelEnd).classList.contains('is-valid') &&
                    document.getElementById(controlPanelStart).classList.contains('is-valid') &&
                    document.getElementById(controlPanelContent).classList.contains('is-valid') && focusedItem === 0) {
                document.getElementById(ctrlPnlAddBtn).removeAttribute('disabled');
            } else {
                document.getElementById(ctrlPnlAddBtn).setAttribute('disabled', 'true');
            }
        }

        /**
         * Front-side date format validation
         * @param {type} date
         * @returns {Boolean}
         */
        function dateFormatValidation(date) {
            // see the html pattern attribute < ... pattern="[A-Za-z]{3}" ... >
            if ((/^(-\d{6}|\d{4})$/).test(date)) {
                return true;
            } else if ((/^(-\d{6}|\d{4})-\d{2}-\d{2}$/).test(date)) {
                return true;
            }
            return false;
        }

        /**
         * Complete fields 'year', 'month', 'day' and 'code' of the item 
         * metaTimeline[key][startOrEnd].
         * Set 'code' = '0' if sDate === ''
         * @param {number} key
         * @param {string} startOrEnd
         * @param {string} sDate
         * @returns {undefined}
         */
        function setDateInMeta(key, startOrEnd, sDate) {
            if (metaTimeline[key][startOrEnd] === undefined) {
                metaTimeline[key][startOrEnd] = {};
            }
            var splitedDate;
            if ((/^(-\d{6}|\d{4})$/).test(sDate)) {
                metaTimeline[key][startOrEnd]['year'] = sDate;
                metaTimeline[key][startOrEnd]['code'] = '4';
            } else if ((/^(-\d{6}|\d{4})-\d{2}-\d{2}$/).test(sDate)) {
                splitedDate = sDate.split('-');
                if (splitedDate.length === 3) {
                    metaTimeline[key][startOrEnd]['year'] = splitedDate[0];
                    metaTimeline[key][startOrEnd]['month'] = splitedDate[1];
                    metaTimeline[key][startOrEnd]['day'] = splitedDate[2];
                } else if (splitedDate.length === 4) {
                    metaTimeline[key][startOrEnd]['year'] = splitedDate[1];
                    metaTimeline[key][startOrEnd]['month'] = splitedDate[2];
                    metaTimeline[key][startOrEnd]['day'] = splitedDate[3];
                }
                metaTimeline[key][startOrEnd]['code'] = '7';
            } else if (sDate === '') {
                metaTimeline[key][startOrEnd]['code'] = '0';
            }
        }

        /**
         * Add the control panel new item to the timeline.
         * The content must be validate before.
         * @returns {undefined}
         */
        function ctrlPnlManageAjout() {
            var contentVal = document.getElementById(controlPanelContent).value;
            var startVal = document.getElementById(controlPanelStart).value;
            var endVal = document.getElementById(controlPanelEnd).value;
            var notesVal = quill.getContents();
            lastId++;
            dataSetItems.add({id: lastId, content: contentVal, start: startVal});
            metaTimeline[lastId] = {};
            metaTimeline[lastId]['action'] = 'create';
            metaTimeline[lastId]['content'] = contentVal;
            setDateInMeta(lastId, 'start', startVal);
            if (endVal !== '') {
                dataSetItems.update({id: lastId, end: endVal});
                setDateInMeta(lastId, 'end', endVal);
            } else {
                setDateInMeta(lastId, 'end', '');
            }
            if (notesVal !== '') {
                quill.update();
                metaTimeline[lastId]['notes'] = JSON.stringify(quill.getContents());
            }
            resetControlPanel();
        }

        /**
         * Fill hidden fields just before sending the request to the controller
         * @returns no return
         */
        function fillHiddenField() {
            // the http request size could be a problem 
            // In this case check this url: 
            // https://stackoverflow.com/questions/2364840/what-is-the-size-limit-of-a-post-request
            // // JSON.stringify documentation: 
            // https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify
            // Add the full content of the timeline to the 'updatedDataSet' hidden input
            var dataSet = dataSetItems.get({
                fields: ['id', 'content', 'start', 'end'],
                type: {
                    id: 'Number',
                    start: 'String',
                    end: 'String'
                }
            });
            // TODO mettre un log a cet endroit pour indiquer la taille de la requête avant du'elle parte
            // + si possible la taille de la configuration serveur
            // Log d'erreur si la taille de la requête est supérieur à la taille permise par le serveur
            document.getElementById('updatedDataSet').setAttribute('value', JSON.stringify(dataSet, null, 2));
            // Add the metaTieline which contains all information
            document.getElementById('metaTimeline').setAttribute('value', JSON.stringify(metaTimeline, null, 2));
        }

    </script>

{% endblock %}