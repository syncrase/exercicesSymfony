{% extends 'base.html.twig' %}

{% block title %}Hello world!{% endblock %}

{% block stylesheets %}
    {{ parent() }}
{% endblock %}
{% block body %}


    <section class="">

        <h1>Chronologie</h1>
        <div class="container-fluid">
            <div class="d-flex row">
                <div id="timeline-container" class="">

                    <div id="timeline"></div>

                </div>
            </div>
        </div>
    </section>


    <section class="">
        <br/><hr><br/>
        <div class="container-fluid">
            <div class="row d-flex">
                <div class="col-lg-4">
                    <div id="log"></div>
                </div>
                <div class="col-lg-8">
                    {{ form_start(controlPanel) }}
                    <div class="form-row">
                        <div class="col-lg-8" style="height:100%;">
                            {{ form_row(controlPanel.notes, {
                                'attr': {
                                    'class': 'form-control', 
                                    'rows': '7',
                                    'oninput': 'ctrlPnlManageUpdate(this)'
                                }, 
                                'label': 'Mes notes',
                                'required': 'false'
                            }) }}
                        </div>
                        <div class="col-lg-4">
                            {{ form_row(controlPanel.content, {
                                'attr': {
                                    'class': 'form-control',
                                    'oninput': 'ctrlPnlManageUpdate(this)'
                                }, 
                                'label': 'Titre',
                                'required': 'true'
                            }) }}
                            {{ form_row(controlPanel.start, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Exemple: -aaaaaa-mm-jj ou aaaa/mm/jj',
                                    'oninput': 'ctrlPnlManageUpdate(this)'
                                }, 
                                'label': 'Date de début',
                                'required': 'true'
                            }) }}
                            {{ form_row(controlPanel.end, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Exemple: -aaaaaa-mm-jj ou aaaa-mm-jj',
                                    'oninput': 'ctrlPnlManageUpdate(this)'
                                }, 
                                'label': 'Date de fin',
                                'required': 'false'
                            }) }}
                            <div class="form-row">
                                <div class="col-lg-4">
                                    {{ form_row(controlPanel.ajout, { 
                                            'attr': {
                                            'class': 'btn btn-primary btn-block btn-lg',
                                            'onclick': 'ctrlPnlManageAjout()'
                                        }, 
                                        'label': 'Ajouter',
                                        'disabled': 'false'
                                    }) }}

                                </div>
                                <div class="col-lg-8">
                                    <input type="hidden" id="updatedDataSet" name="updatedDataSet" value="no-value-yet">
                                    <input type="hidden" id="visFriendlyIds" name="visFriendlyIds" value="no-value-yet">
                                    <input type="hidden" id="visFriendlyDates" name="visFriendlyDates" value="no-value-yet">
                                    {{ form_row(controlPanel.save, { 
                                        'attr': {
                                            'class': 'btn btn-primary btn-block btn-lg',
                                            'onclick': 'fillHiddenField()',
                                            'formaction': '/updateMongo',
                                            'formmethod': 'post'
                                        }, 
                                        'label': 'Sauvegarder'
                                    }) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{ form_end(controlPanel) }}
                </div>
            </div>
        </div>
    </section>


    {#    {% if visChronologie.dataSet is defined %}
            <br/><hr><br/>
            <h1>visDataSet</h1>
            <section class="">
                <div class="container-fluid">
                    <div class="row d-flex">
    
                        {{ visChronologie.dataSet }}
    
                    </div>
                </div>
            </section>
        {% endif %}#}


    {#    {% if evenements is defined %}
            <br/><hr><br/>
            <h1>evenements</h1>
            <section class="">
                <div class="container-fluid">
                    <div class="row d-flex">
                        <table style="width:100%">
                            <caption>All mongo content</caption>
                            {% for ev in evenements %}
                                <tr>
                                    <td>{{ ev.id|e }}</td>
                                    <td>{{ ev.content|e }}</td>
                                    <td>{{ ev.startYear|e }}/{{ ev.startMonth|e }}/{{ ev.startDay|e }}</td>
                                    {% if ev.endYear is defined %}
                                        <td>{{ ev.endYear|e }}/{{ ev.endMonth|e }}/{{ ev.endDay|e }}</td>
                                    {% endif %}
                                </tr>
                            {% endfor %}
                        </table>
                    </div>
                </div>
            </section>
        {% endif %}#}


{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        var HTMLContainer = document.getElementById('timeline');
        // Getting data to feed the timeline
        // Works if getDataSet() returns double quotes instead of simple quotes
        {#        var dataSetItems = new vis.DataSet({{ visChronologie.getDataSet()|raw }});#}


            // Construct the dataSet here in order to manage escaping in notes
            // It's necessary to have quotes and double quotes!!
        {% set visTimelineItems = visChronologie.getVisTimelineItems() %}
        {% set dataset = '[' %}
            //var dataSet = '[';
        {% for visTimelineItem in visTimelineItems %}
            {% set dataset = dataset ~ '{' %}
            {% set dataset = dataset ~ 'id: ' ~ visTimelineItem.id %}
            {% set dataset = dataset ~ ', content: "'|raw ~ visTimelineItem.content ~ '"'|raw %}
            {% set dataset = dataset ~ ', start: "'|raw ~ visTimelineItem.start ~ '"'|raw %}
            {% if visTimelineItem.end is defined and visTimelineItem.end != '' %}
                {% set dataset = dataset ~ ', end: "'|raw ~ visTimelineItem.end ~ '"'|raw %}
            {% endif %}
            {% if visTimelineItem.notes is defined and visTimelineItem.notes != '' %}
                {% set dataset = dataset ~ ', notes: "'|raw ~ visTimelineItem.notes|e('js') ~ '"'|raw %}
            {% endif %}
            {% set dataset = dataset ~ '}' %}
                //Do not set coma at the end
            {% if not loop.last %}
                {% set dataset = dataset ~ ', ' %}
            {% endif %}
        {% endfor %}

        {% set dataset = dataset ~ ']' %}
            var dataSetItems = new vis.DataSet({{ dataset|raw }});


            // Get the last id before any modification. 
            // Permet d'identifier les ajouts, les suppression et les updates
            // Parmis les ids allant de 1 à N. S'il y en a un de manquant il a été supprimé
            // Tous les ids strictement supérieurs à N sont nouveaux
            var ids = dataSetItems.getIds();
            var lastId = ids[ids.length - 1];
            // Configuration for the Timeline
            var dataSetOptions = { {{ visChronologie.getOption()|raw }} };
            // Correspondance entre les ids visjs {key} et les ids mongo {value}
        {% set visFriendlyIds = visChronologie.getVisFriendlyIds() %}
            // Initiate the associative array ([] or new Array() is just a basic array)
            var visFriendlyIds = {};
// TODO vérifier que la taille du tableau est supérieure à 1
        {% for id in 1..visFriendlyIds|length %}
            visFriendlyIds['{{ id }}'] = '{{ visFriendlyIds[id] }}';
        {% endfor %}


        {% set visFriendlyDates = visChronologie.getVisFriendlyDates() %}
            var visFriendlyDates = {};
            var visFriendlyDatesLength = 0;
        {% for id in 1..visFriendlyDates|length %}
            visFriendlyDates['{{ id }}'] = {
                start: '{{ visFriendlyDates[id]['start'] }}',
                end: '{{ visFriendlyDates[id]['end'] }}'
            }
            ;
            visFriendlyDatesLength = {{ id }};
        {% endfor %}


            // Create a Timeline
            var timeline = new vis.Timeline(HTMLContainer, dataSetItems, dataSetOptions);
            // subscribe to any change in the DataSet 
            //dataSetItems.on('*', function (event, properties, senderId) {
            //    console.log('event', event, properties);
            //});


            var focusedItem = 0;

            // Ajoute l'event listener à chaque item de la timeline
            timeline.on('click', function (properties) {
                ctrlPnlInputFeeder('click', properties);
            });


            var controlPanelContent = 'timeline_control_panel_form_content';
            var controlPanelStart = 'timeline_control_panel_form_start';
            var controlPanelEnd = 'timeline_control_panel_form_end';
            var controlPanelNotes = 'timeline_control_panel_form_notes';
            var ctrlPnlAddBtn = 'timeline_control_panel_form_ajout';
            /**
             * Get timeline content to add it in the control panel
             * @param {type} event
             * @param {type} properties
             * @returns {undefined}
             */
            function ctrlPnlInputFeeder(event, properties) {
                resetControlPanel();
                // Complète le control panel avec les informations de l'item sélectionné
                if (properties.item !== null) {
                    // properties.item is the id of the timeline item
                    focusedItem = properties.item;
                    var dataSetItem = dataSetItems.get(focusedItem);
                    // Handle the live DOM
                    document.getElementById(controlPanelContent).setAttribute('value', dataSetItem.content);
                    document.getElementById(controlPanelStart).setAttribute('value', dataSetItem.start);
                    if (dataSetItem.end !== undefined) {
                        document.getElementById(controlPanelEnd).setAttribute('value', dataSetItem.end);
                    }
                    if (dataSetItem.notes !== undefined) {
                        document.getElementById(controlPanelNotes).setAttribute('value', dataSetItem.notes);
                    }
                    // Handle the static DOM (le texte tapé à la main)
                    document.querySelector('#'.concat(controlPanelContent)).value = dataSetItem.content;
                    document.querySelector('#'.concat(controlPanelStart)).value = dataSetItem.start;
                    if (dataSetItem.end !== undefined) {
                        document.querySelector('#'.concat(controlPanelEnd)).value = dataSetItem.end;
                    }
                    if (dataSetItem.notes !== undefined) {
                        document.querySelector('#'.concat(controlPanelNotes)).value = dataSetItem.notes;
                    }
                } else {
                    //resetControlPanel();
                }
            }

            /**
             * Reset the control panel fields
             * @returns {undefined}
             */
            function resetControlPanel() {
                // Handle the static DOM (le texte tapé à la main)
                document.querySelector('#'.concat(controlPanelContent)).value = '';
                // BUG? Each time the value is set to '', the 'required' 
                // attribute is added and the form is validate (all fields 
                // borders are printed in red)
                document.querySelector('#'.concat(controlPanelContent)).removeAttribute('required');
                document.querySelector('#'.concat(controlPanelStart)).value = '';
                document.querySelector('#'.concat(controlPanelStart)).removeAttribute('required');
                document.querySelector('#'.concat(controlPanelEnd)).value = '';
                document.querySelector('#'.concat(controlPanelEnd)).removeAttribute('required');
                document.querySelector('#'.concat(controlPanelNotes)).value = '';
                document.querySelector('#'.concat(controlPanelNotes)).removeAttribute('required');
                // Handle the live DOM
                //document.getElementById(controlPanelContent).innerHTML = 'tututu';
                document.getElementById(controlPanelContent).removeAttribute('value');
                document.getElementById(controlPanelStart).removeAttribute('value');
                document.getElementById(controlPanelEnd).removeAttribute('value');
                document.getElementById(controlPanelNotes).removeAttribute('value');
                focusedItem = 0;
            }

            /**
             * Get control panel content to add it in the timeline.
             * Method called at each modification in control panel.
             * @param {type} formField
             * @returns {undefined}
             */
            function ctrlPnlManageUpdate(formField) {
                //alert(formField.id);
                if (focusedItem !== 0) {
                    // Modification live de l'item sélectionné
                    var dataSetItem = dataSetItems.get(focusedItem);
                    if (formField.id === controlPanelNotes) {
                        //alert(formField.value.replace(/\n/g, "\\n"));
                        // see https://stackoverflow.com/questions/25921319/escape-new-lines-with-js
                        dataSetItem.notes = formField.value.replace(/\n/g, "\\n");
                        dataSetItems.update(dataSetItem);
                    } else if (formField.id === controlPanelContent) {
                        //alert('content modif');
                        dataSetItem.content = formField.value;
                        dataSetItems.update(dataSetItem);
                    } else if (formField.id === controlPanelStart) {
                        //alert('start date modif');
                        if (dateFormatValidation(formField.value)) {
                            dataSetItem.start = formField.value;
                            dataSetItems.update(dataSetItem);
                        } else {
                            ctrlPnlValidateForm();
                        }
                    } else if (formField.id === controlPanelEnd) {
                        //alert('end date modif');
                        if (dateFormatValidation(formField.value)) {
                            dataSetItem.end = formField.value;
                            dataSetItems.update(dataSetItem);
                        } else {
                            ctrlPnlValidateForm();
                        }
                    } else {
                        // Remove this alert. Prefer to add a log error
                        alert('Id is unknown, please refer to the ctrlPnlManageUpdate method');
                    }
                } else {
                    //alert('no selected item');
                    //=> on débloque le bouton valider pour la création d'un nouvel objet
                    ctrlPnlAddBtnActivation();
                }

            }

            /**
             * Switch between 'is-valid' and 'is-invalid'  form inputs class
             * @returns {undefined}
             */
            function ctrlPnlValidateForm() {
                if (document.getElementById(controlPanelContent).value !== '') {
                    document.getElementById(controlPanelContent).classList.remove('is-invalid');
                    document.getElementById(controlPanelContent).classList.add('is-valid');
                } else {
                    document.getElementById(controlPanelContent).classList.remove('is-valid');
                    document.getElementById(controlPanelContent).classList.add('is-invalid');
                }

                if (dateFormatValidation(document.getElementById(controlPanelStart).value)) {
                    document.getElementById(controlPanelStart).classList.remove('is-invalid');
                    document.getElementById(controlPanelStart).classList.add('is-valid');
                } else {
                    document.getElementById(controlPanelStart).classList.remove('is-valid');
                    document.getElementById(controlPanelStart).classList.add('is-invalid');
                }

                //alert(document.getElementById(controlPanelEnd).value !== '');
                if (document.getElementById(controlPanelEnd).value !== '') {
                    if (dateFormatValidation(document.getElementById(controlPanelEnd).value)) {
                        document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                        document.getElementById(controlPanelEnd).classList.add('is-valid');
                    } else {
                        document.getElementById(controlPanelEnd).classList.remove('is-valid');
                        document.getElementById(controlPanelEnd).classList.add('is-invalid');
                    }
                } else {
                    // Si le champ est vide c'est valide
                    document.getElementById(controlPanelEnd).classList.remove('is-invalid');
                    document.getElementById(controlPanelEnd).classList.add('is-valid');
                }
                //
                // No validation for notes
            }
            /**
             * Check the control panel fields in order to activate the add button
             * @returns {undefined}
             */
            function ctrlPnlAddBtnActivation() {

                ctrlPnlValidateForm();

                // si les deux sont valides, supprimer l'attribut disabled
                // TODO Il faut vérifier que les données sont cohérentes
                // La date de début est-elle antérieure à la date de fin?
                //    alert(document.getElementById(controlPanelEnd).classList.contains('is-valid'));

                if (document.getElementById(controlPanelEnd).classList.contains('is-valid') &&
                        document.getElementById(controlPanelStart).classList.contains('is-valid') &&
                        document.getElementById(controlPanelContent).classList.contains('is-valid')) {
                    //alert('removeAttribute');
                    document.getElementById(ctrlPnlAddBtn).removeAttribute('disabled');
                } else {
                    //alert('removeAttribute');
                    document.getElementById(ctrlPnlAddBtn).setAttribute('disabled', 'true');
                }

            }

            /**
             * Front-side date format validation
             * @param {type} date
             * @returns {Boolean}
             */
            function dateFormatValidation(date) {
                // see the html pattern attribute < ... pattern="[A-Za-z]{3}" ... >
                var splitedDateContent = date.split('-');
                if (splitedDateContent.length === 1) {
                    // Dans ce cas c'est censé n'être que l'année
                    var res = (/^-?\d+$/).test(splitedDateContent[0]);
                    if (res === true) {
                        return true;
                    } else {
                        return false;
                    }
                    // Dance ce cas la il va falloir que je renvoie le code d'adaptation de la date saisie!
                } else if (splitedDateContent.length === 3) {
                    // Les expressions régulières peuvent être largement améliorées!
                    var res = (/^(-\d{6}|\d{4})$/).test(splitedDateContent[0]);
                    if (res === true) {
                        // OK pour l'année
                        res = (/^[0-1]?\d{1}$/).test(splitedDateContent[1]);
                        if (res === true) {
                            // OK pour le mois
                            res = (/^[0-3]?\d{1}$/).test(splitedDateContent[2]);
                            if (res === true) {
                                // OK pour le jours
                                return true;
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                } else {
                    // Ni une seule année ni une date complète.
                    return false;
                }
            }

            /**
             * Add the control panel new item to the timeline.
             * The content must be validate before.
             * @returns {undefined}
             */
            function ctrlPnlManageAjout() {
                var controlPanelContent = 'timeline_control_panel_form_content';
                var contentVal = document.getElementById(controlPanelContent).value;
                var controlPanelStart = 'timeline_control_panel_form_start';
                var startVal = document.getElementById(controlPanelStart).value;
                var controlPanelEnd = 'timeline_control_panel_form_end';
                var endVal = document.getElementById(controlPanelEnd).value;
                var controlPanelNotes = 'timeline_control_panel_form_notes';
                var notesVal = document.getElementById(controlPanelNotes).value;
                lastId++;
                dataSetItems.add({id: lastId, content: contentVal, start: startVal});
                if (endVal !== '') {
                    dataSetItems.update({id: lastId, end: endVal});
                }
                if (notesVal !== '') {
                    dataSetItems.update({id: lastId, notes: notesVal});
                }
                // **TODO** ajout de la date dans le tableau associatif des dates 
                // pour signaler quels éléments n'ont pas été renseignés par 
                // l'utilisateur mais ajoutés tout de même pour rendre les 
                // dates visJS Friendly
                visFriendlyDatesLength++;
                // Dépends de ce qu'à renseigné l'utilisateur
                // TODO Check pour les deux dates si c'est 
                // année | année & mois | année & mois & jour
                visFriendlyDates[String(visFriendlyDatesLength)] = {
                    start: '7',
                    end: '0'
                };
                resetControlPanel();
            }

            /**
             * Fill hidden fields just before sending the request to the controller
             * @returns no return
             */
            function fillHiddenField() {
                // the http request size could be a problem 
                // In this case check this url: 
                // https://stackoverflow.com/questions/2364840/what-is-the-size-limit-of-a-post-request
                // // JSON.stringify documentation: 
                // https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify
                // Add the full content of the timeline to the 'updatedDataSet' hidden input
                var dataSet = dataSetItems.get({
                    fields: ['id', 'content', 'start', 'end', 'notes'],
                    type: {
                        id: 'Number',
                        start: 'String',
                        end: 'String'
                    }
                });
                // TODO mettre un log a cet endroit pour indiquer la taille de la requête avant du'elle parte
                // + si possible la taille de la configuration serveur
                // Log d'erreur si la taille de la requête est supérieur à la taille permise par le serveur
                document.getElementById('updatedDataSet').setAttribute('value', JSON.stringify(dataSet, null, 2));
                // Add the first loaded (and unmodified) ids timelineItem association
                document.getElementById('visFriendlyIds').setAttribute('value', JSON.stringify(visFriendlyIds, null, 2));
                // Add the associative array to inform which dates are by default
                document.getElementById('visFriendlyDates').setAttribute('value', JSON.stringify(visFriendlyDates, null, 2));
            }

    </script>
{% endblock %}

